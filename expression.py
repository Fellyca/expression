{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "160a9852",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 652ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 40ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 34ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 30ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 28ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 30ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 30ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 28ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 30ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 28ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 28ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 26ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 31ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 31ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 31ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 30ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 33ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 32ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 28ms/step\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 27ms/step\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import cv2\n",
    "import numpy as np\n",
    "from tensorflow.keras.models import load_model\n",
    "import random\n",
    "\n",
    "# Load model yang telah disimpan\n",
    "model = load_model(\"modelv1.h5\")\n",
    "\n",
    "# Dictionary label kelas\n",
    "class_labels = {0: 'surprise', 1: 'angry', 2: 'happy', 3: 'neutral'}\n",
    "\n",
    "# Fungsi untuk mendeteksi emoji wajah dari kelas prediksi\n",
    "def detect_emoji(prediction):\n",
    "    return class_labels[np.argmax(prediction)]\n",
    "\n",
    "def shuffle_colors():\n",
    "    colors = [(0, 0, 255), (0, 255, 255), (0, 255, 0)]  # Merah, kuning, hijau\n",
    "    random.shuffle(colors)\n",
    "    return colors\n",
    "\n",
    "# Fungsi untuk mendeteksi ekspresi wajah dari video kamera\n",
    "def detect_expression():\n",
    "    # Inisialisasi game\n",
    "    colors = shuffle_colors()\n",
    "    score = 0\n",
    "\n",
    "    # Membuat objek untuk kamera\n",
    "    cap = cv2.VideoCapture(0)\n",
    "\n",
    "    while True:\n",
    "        # Memeriksa apakah daftar warna kosong\n",
    "        if len(colors) == 0:\n",
    "            # Jika kosong, mengisi kembali daftar warna\n",
    "            colors = shuffle_colors()\n",
    "            continue\n",
    "            \n",
    "        current_color = colors[0]\n",
    "        \n",
    "        # Membaca frame dari kamera\n",
    "        ret, frame = cap.read()\n",
    "        \n",
    "        # Menggambar lingkaran warna\n",
    "        draw_color_circle(frame, current_color)\n",
    "        \n",
    "        # Konversi frame menjadi grayscale\n",
    "        gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
    "        \n",
    "        # Preprocessing frame (resize ke 48x48 dan normalisasi)\n",
    "        resized_frame = cv2.resize(gray_frame, (48, 48))\n",
    "        normalized_frame = resized_frame / 255.0\n",
    "        \n",
    "        # Ubah dimensi input menjadi (1, 48, 48, 1)\n",
    "        input_frame = np.expand_dims(normalized_frame, axis=0)\n",
    "        input_frame = np.expand_dims(input_frame, axis=-1)\n",
    "        \n",
    "        # Melakukan prediksi dengan model\n",
    "        prediction = model.predict(input_frame)\n",
    "        \n",
    "        # Mendeteksi emoji wajah dari hasil prediksi\n",
    "        emoji = detect_emoji(prediction)\n",
    "        \n",
    "        cv2.putText(frame, emoji, (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2, cv2.LINE_AA)\n",
    "        \n",
    "        # Jika warna terdepan sesuai dengan ekspresi, tambahkan skor dan hilangkan lingkaran\n",
    "        if emoji == 'angry' and current_color == (0, 0, 255):\n",
    "            score += 1\n",
    "            colors.pop(0)\n",
    "        elif emoji == 'surprise' and current_color == (0, 255, 255):\n",
    "            score += 1\n",
    "            colors.pop(0)\n",
    "        elif emoji == 'happy' and current_color == (0, 255, 0):\n",
    "            score += 1\n",
    "            colors.pop(0)\n",
    "        \n",
    "        # Menampilkan skor\n",
    "        cv2.putText(frame, \"Score: \" + str(score), (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2, cv2.LINE_AA)\n",
    "        \n",
    "        # Menampilkan frame\n",
    "        cv2.imshow('Emoji Detection', frame)\n",
    "        \n",
    "        # Keluar dari loop jika tombol 'q' ditekan\n",
    "        if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "            break\n",
    "\n",
    "    # Menutup kamera dan jendela OpenCV\n",
    "    cap.release()\n",
    "    cv2.destroyAllWindows()\n",
    "\n",
    "# Fungsi untuk menggambar lingkaran warna\n",
    "def draw_color_circle(frame, color):\n",
    "    height, width, _ = frame.shape\n",
    "    radius = min(height, width) // 10\n",
    "    center = (500, 100)\n",
    "    cv2.circle(frame, center, radius, color, -1)\n",
    "\n",
    "# Fungsi utama untuk menjalankan aplikasi\n",
    "def main():\n",
    "    st.title(\"Emoji Detection Game\")\n",
    "\n",
    "    st.write(\"Silakan tunjukkan ekspresi wajah yang sesuai dengan warna lingkaran!\")\n",
    "\n",
    "    # Menjalankan deteksi ekspresi wajah\n",
    "    detect_expression()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f20cbbdd",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'keras' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[1;32mIn [5]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[43mkeras\u001b[49m\u001b[38;5;241m.\u001b[39m__version__)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'keras' is not defined"
     ]
    }
   ],
   "source": [
    "print(keras.__version__)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
